From 92958ceaa55b257a811d72de87888fe8533c77b4 Mon Sep 17 00:00:00 2001
From: Jon Siwek <jsiwek@corelight.com>
Date: Tue, 1 Dec 2020 20:10:30 -0800
Subject: [PATCH] Upgrade pybind11 to v2.6.1 and fix compatibility issues

diff --git a/auxil/broker/bindings/python/broker/__init__.py b/auxil/broker/bindings/python/broker/__init__.py
index bcae8aae..41241b20 100644
--- a/auxil/broker/bindings/python/broker/__init__.py
+++ b/auxil/broker/bindings/python/broker/__init__.py
@@ -149,7 +149,7 @@ def add_topic(self, topic, block=False):
     def remove_topic(self, topic, block=False):
         return self._subscriber.remove_topic(_make_topic(topic), block)

-class StatusSubscriber(_broker.Subscriber):
+class StatusSubscriber():
     def __init__(self, internal_subscriber):
         self._subscriber = internal_subscriber

diff --git a/auxil/broker/bindings/python/data.cpp b/auxil/broker/bindings/python/data.cpp
index 17379016..21817fd9 100644
--- a/auxil/broker/bindings/python/data.cpp
+++ b/auxil/broker/bindings/python/data.cpp
@@ -38,6 +38,7 @@ void init_data(py::module& m) {
         })
     .def("__repr__",
          [](const broker::address& a) { return broker::to_string(a); })
+    .def(hash(py::self))
     .def(py::self < py::self)
     .def(py::self <= py::self)
     .def(py::self > py::self)
@@ -82,6 +83,7 @@ void init_data(py::module& m) {
     .def(py::init<std::string>())
     .def_readwrite("name", &broker::enum_value::name)
     .def("__repr__", [](const broker::enum_value& e) { return broker::to_string(e); })
+    .def(hash(py::self))
     .def(py::self < py::self)
     .def(py::self <= py::self)
     .def(py::self > py::self)
@@ -96,6 +98,7 @@ void init_data(py::module& m) {
     .def("number", &broker::port::number)
     .def("get_type", &broker::port::type)
     .def("__repr__", [](const broker::port& p) { return broker::to_string(p); })
+    .def(hash(py::self))
     .def(py::self < py::self)
     .def(py::self <= py::self)
     .def(py::self > py::self)
@@ -123,6 +126,7 @@ void init_data(py::module& m) {
     .def("network", &broker::subnet::network)
     .def("length", &broker::subnet::length)
     .def("__repr__", [](const broker::subnet& sn) { return to_string(sn); })
+    .def(hash(py::self))
     .def(py::self < py::self)
     .def(py::self <= py::self)
     .def(py::self > py::self)
@@ -138,6 +142,7 @@ void init_data(py::module& m) {
         }))
     .def("count", &broker::timespan::count)
     .def("__repr__", [](const broker::timespan& s) { return broker::to_string(s); })
+    .def(hash(py::self))
     .def(py::self + py::self)
     .def(py::self - py::self)
     .def(py::self * broker::timespan::rep{})
@@ -161,6 +166,7 @@ void init_data(py::module& m) {
         }))
     .def("time_since_epoch", &broker::timestamp::time_since_epoch)
     .def("__repr__", [](const broker::timestamp& ts) { return broker::to_string(ts); })
+    .def(hash(py::self))
     .def(py::self < py::self)
     .def(py::self <= py::self)
     .def(py::self > py::self)
@@ -217,6 +223,7 @@ void init_data(py::module& m) {
     .def("as_vector", [](const broker::data& d) { return caf::get<broker::vector>(d); })
     .def("get_type", &broker::data::get_type)
     .def("__str__", [](const broker::data& d) { return broker::to_string(d); })
+    .def(hash(py::self))
     .def(py::self < py::self)
     .def(py::self <= py::self)
     .def(py::self > py::self)
diff --git a/auxil/broker/bindings/python/set_bind.h b/auxil/broker/bindings/python/set_bind.h
index 0363c431..f79c2edc 100644
--- a/auxil/broker/bindings/python/set_bind.h
+++ b/auxil/broker/bindings/python/set_bind.h
@@ -6,8 +6,8 @@

 #include <pybind11/stl_bind.h>

-NAMESPACE_BEGIN(pybind11)
-NAMESPACE_BEGIN(detail)
+PYBIND11_NAMESPACE_BEGIN(PYBIND11_NAMESPACE)
+PYBIND11_NAMESPACE_BEGIN(detail)

 /* For a set data structure, recursively check the value type (which is std::pair for maps) */
 template <typename T>
@@ -107,7 +107,7 @@ template <typename Set, typename Class_> auto set_if_insertion_operator(Class_ &
          "Return the canonical string representation of this set.");
 }

-NAMESPACE_END(detail)
+PYBIND11_NAMESPACE_END(detail)

 //
 // std::set
@@ -147,4 +147,4 @@ class_<Set, holder_type> bind_set(module &m, std::string const &name, Args&&...
     return cl;
 }

-NAMESPACE_END(pybind11)
+PYBIND11_NAMESPACE_END(PYBIND11_NAMESPACE)
