diff --git a/README.md b/README.md
index de26515..976f9e5 100644
--- a/README.md
+++ b/README.md
@@ -253,14 +253,22 @@ and `greN`.  Usually this flag can be enabled administratively.
 
 The GNU Configure & Build system use `/usr/local` as the default install
 prefix.  In many cases this is useful, but this means the configuration
-files and cache files will also use that same prefix.  Most users have
-come to expect those files in `/etc/` and `/var/run/` and configure has
-a few useful options that are recommended to use:
+files, cache, and PID files will also use that prefix.  Most users have
+come to expect those files in `/etc/` and `/var/` and configure has a
+few useful options that are recommended to use.  For SMCRoute you may
+want to use something like this:
 
-    ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var
+    ./configure --prefix=/usr --sysconfdir=/etc --runstatedir=/var/run
     make -j5
     sudo make install-strip
 
+Usually your system reserves `/usr` for native pacakges, so most users
+drop `--prefix`, installing to `/usr/local`, or use `--prefix=/opt`.
+
+**Note:** On some systems `--runstatedir` may not be available in the
+  configure script, try `--localstatedir=/var` instead.
+
+
 ### Privilege Separation
 
 As of SMCRoute v2.2 support for privilege separation using the `libcap`
diff --git a/configure.ac b/configure.ac
index bafccfa..f6c197d 100644
--- a/configure.ac
+++ b/configure.ac
@@ -189,15 +189,27 @@ AS_IF([test "x$ac_cv_header_sys_capability_h" = "xno"], [
 	])
 	with_libcap=no])
 
+# Workaround for as-of-yet unreleased runstatedir support, planned for
+# autoconf 2.70, which some major distros have backported.
+AS_IF([test -z "$runstatedir"], runstatedir="$localstatedir/run")
+AC_SUBST(runstatedir)
+
 AC_OUTPUT
 
+# Expand directories for configuration summary, unexpanded defaults:
+# sysconfdir  => ${prefix}/etc
+# runstatedir => ${localstatedir}/run
+SYSCONFDIR=`eval echo $sysconfdir`
+RUNSTATEDIR=`eval echo $runstatedir`
+RUNSTATEDIR=`eval echo $RUNSTATEDIR`
+
 cat <<EOF
 
 ------------------ Summary ------------------
  $PACKAGE_NAME version $PACKAGE_VERSION
   Prefix.........: $prefix
-  Sysconfdir.....: `eval echo $sysconfdir`
-  Localstatedir..: `eval echo $localstatedir`
+  Sysconfdir.....: $SYSCONFDIR
+  Runstatedir....: $RUNSTATEDIR
   C Compiler.....: $CC $CFLAGS $CPPFLAGS $LDFLAGS $LIBS
 
  Optional features:
diff --git a/src/Makefile.am b/src/Makefile.am
index ae2bcdc..1ff67b9 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -6,7 +6,7 @@ smcrouted_SOURCES	= smcrouted.c mroute.c mroute.h ifvc.c ifvc.h mcgroup.c mcgrou
 			  timer.c timer.h queue.h
 smcrouted_CFLAGS        = -W -Wall -Wextra -Wno-deprecated-declarations
 smcrouted_CPPFLAGS	= -D_ATFILE_SOURCE -D_INCOMPLETE_XOPEN_C063
-smcrouted_CPPFLAGS     += -DSYSCONFDIR=\"@sysconfdir@\" -DLOCALSTATEDIR=\"@localstatedir@\"
+smcrouted_CPPFLAGS     += -DSYSCONFDIR=\"@sysconfdir@\" -DRUNSTATEDIR=\"@runstatedir@\"
 smcrouted_LDADD		= $(LIBS) $(LIBOBJS) @LIB_RT@ @LIB_PTHREAD@
 
 if USE_LIBCAP
@@ -23,7 +23,7 @@ sbin_PROGRAMS	       += smcroutectl
 smcrouted_SOURCES      += msg.c msg.h ipc.c ipc.h
 smcroutectl_SOURCES	= smcroutectl.c msg.h util.h
 smcroutectl_CFLAGS      = -W -Wall -Wextra
-smcroutectl_CPPFLAGS    = -DLOCALSTATEDIR=\"@localstatedir@\"
+smcroutectl_CPPFLAGS    = -DRUNSTATEDIR=\"@runstatedir@\"
 endif
 
 if USE_DOTCONF
diff --git a/src/ipc.c b/src/ipc.c
index f4adc5b..153df50 100644
--- a/src/ipc.c
+++ b/src/ipc.c
@@ -93,7 +93,7 @@ int ipc_init(void)
 	int sd;
 	socklen_t len;
 
-	if (strlen(LOCALSTATEDIR) + strlen(ident) + 11 >= sizeof(sun.sun_path)) {
+	if (strlen(RUNSTATEDIR) + strlen(ident) + 11 >= sizeof(sun.sun_path)) {
 		smclog(LOG_ERR, "Too long socket path, max %zd chars", sizeof(sun.sun_path));
 		return -1;
 	}
@@ -108,7 +108,7 @@ int ipc_init(void)
 	sun.sun_len = 0;	/* <- correct length is set by the OS */
 #endif
 	sun.sun_family = AF_UNIX;
-	snprintf(sun.sun_path, sizeof(sun.sun_path), "%s/run/%s.sock", LOCALSTATEDIR, ident);
+	snprintf(sun.sun_path, sizeof(sun.sun_path), "%s/%s.sock", RUNSTATEDIR, ident);
 
 	unlink(sun.sun_path);
 	smclog(LOG_DEBUG, "Binding IPC socket to %s", sun.sun_path);
diff --git a/src/pidfile.c b/src/pidfile.c
index f7b1723..31c794c 100644
--- a/src/pidfile.c
+++ b/src/pidfile.c
@@ -47,7 +47,7 @@
 static char *pidfile_path = NULL;
 static pid_t pidfile_pid  = 0;
 
-const  char *__pidfile_path = LOCALSTATEDIR "/run";
+const  char *__pidfile_path = RUNSTATEDIR;
 const  char *__pidfile_name = NULL;
 extern char *prognm;
 
diff --git a/src/smcroutectl.c b/src/smcroutectl.c
index 6ce415e..74b7419 100644
--- a/src/smcroutectl.c
+++ b/src/smcroutectl.c
@@ -174,7 +174,7 @@ static int ipc_connect(void)
 	sa.sun_len = 0;	/* <- correct length is set by the OS */
 #endif
 	sa.sun_family = AF_UNIX;
-	snprintf(sa.sun_path, sizeof(sa.sun_path), "%s/run/%s.sock", LOCALSTATEDIR, ident);
+	snprintf(sa.sun_path, sizeof(sa.sun_path), "%s/%s.sock", RUNSTATEDIR, ident);
 
 	len = offsetof(struct sockaddr_un, sun_path) + strlen(sa.sun_path);
 	if (connect(sd, (struct sockaddr *)&sa, len) < 0) {
diff --git a/src/smcrouted.c b/src/smcrouted.c
index 74076c6..d687415 100644
--- a/src/smcrouted.c
+++ b/src/smcrouted.c
@@ -251,7 +251,7 @@ static int usage(int code)
 
 	compose_paths();
 	if (pid_file[0] != '/')
-		snprintf(pidfn, sizeof(pidfn), "%s/run/%s.pid", LOCALSTATEDIR, pid_file);
+		snprintf(pidfn, sizeof(pidfn), "%s/%s.pid", RUNSTATEDIR, pid_file);
 	else
 		snprintf(pidfn, sizeof(pidfn), "%s", pid_file);
 
